{"version":3,"sources":["App.js","web-build/register-service-worker.js"],"names":["App","props","Square","value","onPress","style","border","width","height","display","justifyContent","alignItems","useState","Array","fill","boardSquares","setBoardSquares","xIsNext","setXIsNext","calculateWinner","squares","winningLines","i","length","a","b","c","useEffect","flag","RenderSquare","index","handlePress","nextPlayer","winner","status","flexDirection","marginBottom","color","fontSize","marginTop","e","backgroundColor","padding","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"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","file":"static/js/app.64ac2883.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {View, Text, TouchableOpacity} from 'react-native'; \n\n\nconst App = props => {\n\n    function Square({value,onPress})\n    {\n        return (\n            <TouchableOpacity\n                    onPress={onPress}\n                    style={{\n                        border: '1px solid black',\n                        width: '100px',\n                        height: '100px',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    }}>\n                <Text>{value}</Text>\n            </TouchableOpacity>\n        );\n    }\n\n    function Board(props)\n    {\n        const [boardSquares, setBoardSquares] = useState(Array(9).fill(null));\n        const [xIsNext, setXIsNext] = useState(true);\n\n        const handlePress = index => {\n           const squares = [...boardSquares];\n        \n           if(calculateWinner(squares) || squares[index])\n                return;\n\n            squares[index] = xIsNext ? 'X': 'O';\n            setBoardSquares(squares);\n            setXIsNext(!xIsNext);\n        }\n\n        useEffect(()=>{\n            let squares = [...boardSquares];\n            if(calculateWinner(squares))\n                  return; \n                  \n            let flag = false;\n            for(let i=0; i < squares.length; i++)\n            {\n                if(squares[i] == null)\n                {\n                    flag = true;\n                    break;\n                }\n            }\n\n            if(!flag)\n            {\n                squares = Array(9).fill(null);\n                setBoardSquares(squares);\n            }\n        },[boardSquares]);\n\n        function calculateWinner(squares)\n        {\n            const winningLines = [\n                [0,1,2],\n                [3,4,5],\n                [6,7,8],\n                [0,3,6],\n                [1,4,7],\n                [2,5,8],\n                [0,4,8],\n                [6,4,2]\n            ];\n\n            for(let i=0; i < winningLines.length; i++)\n            {\n                const [a,b,c] = winningLines[i];\n                if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c])\n                {\n                    return squares[a];\n                }\n            }\n\n            return null;\n        }\n\n        const RenderSquare = ({index}) => {\n            return (\n                <Square value={boardSquares[index]} onPress={() => handlePress(index)} />\n            )\n        }\n\n        const handleReset = e => {\n            const squares = Array(9).fill(null);\n            setBoardSquares(squares);\n        }\n\n        const nextPlayer = xIsNext ? 'X' : 'O'; \n        const winner = calculateWinner(boardSquares);\n        const status = winner ? `Winner: ${winner}` : `Next player: ${nextPlayer}`;\n\n        return (\n            <View\n              style={{\n                  width: '100%',\n                  height: '100vh',\n                  display : 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  alignItems: 'center'\n              }}>\n                <View\n                    style={{\n                        marginBottom: '30px'\n                    }}>\n                    <Text\n                        style={{\n                            color: 'black',\n                            fontSize: '20px'\n                        }}\n                        >{status}\n                    </Text>\n                </View>\n                <View>\n                    <View \n                            style={{\n                                display: 'flex',\n                                flexDirection: 'row'\n                            }}>\n                            <RenderSquare index={0} />\n                            <RenderSquare index={1} />\n                            <RenderSquare index={2} />\n                    </View>\n                    <View \n                            style={{\n                                display: 'flex',\n                                flexDirection: 'row'\n                            }}>\n                            <RenderSquare index={3} />\n                            <RenderSquare index={4} />\n                            <RenderSquare index={5} />\n                    </View>\n                    <View \n                            style={{\n                                display: 'flex',\n                                flexDirection: 'row'\n                            }}>\n                            <RenderSquare index={6} />\n                            <RenderSquare index={7} />\n                            <RenderSquare index={8} />\n                    </View>\n                </View>\n                <View\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        marginTop: '30px'\n                    }}>\n                    <TouchableOpacity\n                            onPress={handleReset}\n                            style={{\n                                backgroundColor: 'green',\n                                padding: '10px'\n                            }}>\n                        <Text\n                           style={{\n                               color: 'white'\n                           }}\n                            >Reset\n                        </Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        );\n    }\n\n    return (\n        <View>\n            <Board />\n        </View>\n    );\n}\nexport default App;","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}